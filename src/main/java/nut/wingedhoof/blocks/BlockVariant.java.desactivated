package nut.wingedhoof.blocks;

import nut.wingedhoof.WingedHoof;
import nut.wingedhoof.tabs.WingedHoofTab;
import nut.wingedhoof.blocks.item.ItemBlockVariant;
import nut.wingedhoof.handler.EnumHandler;
import nut.wingedhoof.init.BlockInit;
import nut.wingedhoof.init.ItemInit;
import nut.wingedhoof.interfaces.IHasMeta;
import nut.wingedhoof.interfaces.IRegisterable;

import java.util.Random;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemTool;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Item.ToolMaterial;
import net.minecraft.block.material.Material;

import net.minecraft.util.NonNullList;
import net.minecraft.util.math.MathHelper;
import net.minecraft.world.World;


import net.minecraft.world.IBlockAccess;
import net.minecraft.util.math.BlockPos;
import net.minecraft.block.state.IBlockState;

public class BlockVariant extends Block implements IRegisterable, IHasMeta {
	public static final PropertyEnum<EnumHandler.EnumType> VARIANT = PropertyEnum.<EnumHandler.EnumType>create("variant", EnumHandler.EnumType.class);

	private String name;
	private String dimension;

	public BlockVariant(String name, String dimension) {
		super(Material.ROCK);
		this.name         = name;
		this.dimension = dimension;

		updateRegistryAndLocalizedName(name);
		setCreativeTab(WingedHoof.CREATIVE_TAB);

		setHardness(hardness);
		setResistance(resistance);
		setHarvestLevel(harvestTool, harvestLevel);

		// Default block variant
		setDefaultState(this.blockState.getBlockState().withProperty(VARIANT, EnumHandler.EnumType.AMBER))

		BlockInit.BLOCKS.add(this); // Add to block items
		ItemInit.ITEMS.add(new ItemBlockVariant(this).setRegistryName(name)); // Create an ItemBlock and add it to iTEMS
	}

	@Override
	public void getDrops(NonNullList<ItemStack> drops, IBlockAccess world, BlockPos pos, IBlockState state, int fortune) {
		Random random = world instanceof World ? ((World)world).rand : new Random();

		// Drop item based on the fortune level
		drops.add(new ItemStack(Item.getItemFromBlock(this), MathHelper.getInt(random, 1, (fortune + 1)), getMetaFromState(world.getBlockState(pos))));

		super.getDrops(drops, world, pos, state, fortune);
	}

	@Override
	public ItemStack getPickBlock(IBlockState, RayTraceResult target, World world, BlockPos pos, EntityPlayer player) {
		return new ItemStack(Item.getItemFromBlock(this), 1, getMetaFromState(world.getBlockState(pos)));
	}

	@Override
	public void getSubBlocks(CreativeTabs itemIn, NonNullList<ItemStack> items) {
		for(EnumHandler.EnumType variant : EnumHandler.EnumType.values()) {
			items.add(new ItemStack(this, 1, variant.getMeta()));
		}
	}

	// @Override
	// public int quantityDropped(IBlockState state, int fortune, Random random) {
	// 	if(dropItem == null)
	// 		return dropQuantity;
	// 	return 0; // Returning 0 prevents the block from dropping itself
	// }

	@Override
	public int getExpDrop(IBlockState state, IBlockAccess world, BlockPos pos, int fortune) {
		// Return the amount of experience points to drop
		Random random = world instanceof World ? ((World)world).rand : new Random();	
		return MathHelper.getInt(random, 1, maxExp + (fortune + 1)); // Also drop xp based on the fortune level
	}


	@Override
	public int damageDropped(IBlockState state) {
		return ((EnumHandler.EnumType)state.getValue(VARIANT)).getMeta();
	}

	@Override
	public int getMetaFromState(IBlockState state) {
		return ((EnumHandler.EnumType)state.getValue(VARIANT)).getMeta();
	}


	// Get normal state of the block, default is what you set on constructor, but if is another, get it
	@Override
	public int getStateFromMeta(int meta) {
		return this.getDefaultState().withProperty(VARIANT, EnumHandler.EnumType.byMetadata(meta));
	}


	@Override
	protected BlockStatecontainer createBlockState() {
		return new BlockStatecontainer(this, new IProperty[] { VARIANT });
	}

	@Override String getSpecialName(ItemStack stack) {
		return EnumHandler.EnumType.values()[stack.getItemDamage()].getName();
	}

	// Register all variants
	@Override
	public void registerItemModel() {
		// WingedHoof.proxy.registerItemRenderer(Item.getItemFromBlock(this), 0);

		for(int i = 0; i < EnumHandler.EnumType.values().length; i++) {
			WingedHoof.proxy.registerVariantRenderer(Item.getItemFromBlock(this), i, "ore_" + this.dimension + "_" + EnumHandler.EnumType.values()[i].getName());
		}
	}

	@Override
	public void updateRegistryAndLocalizedName(String name) {
		setUnlocalizedName(name); // Used for language files
		setRegistryName(name); // USed for registering the item and it's models
	}
}
